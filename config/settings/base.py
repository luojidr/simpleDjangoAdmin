"""
Django settings for dj_backend project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys
import mimetypes
from pathlib import Path
from datetime import timedelta
import environ

env = environ.Env()

BASE_DIR = Path(__file__).resolve(strict=True).parent.parent.parent
APP_NAME = BASE_DIR.name
PROJECT_DIR = BASE_DIR / APP_NAME
APPS_DIR = PROJECT_DIR / 'apps'
SETTINGS_DIR = str(BASE_DIR / 'config/.dotenv')

# Very Important
sys.path.append(str(PROJECT_DIR))
sys.path.append(str(APPS_DIR))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY", default="@vvtfc3&p@%e64bfq-m1y8ck!yjm$dp9yfqxz-0i-z+!ef0v=9")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DJANGO_DEBUG", False)

ALLOWED_HOSTS = []


# APPS
# ------------------------------------------------------------------------------
# Application definition
# "django.contrib.auth" 会产生三张表,如果用上可以不管 [auth_group,auth_group_permissions,auth_permission]
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',

    'compressor',
    "corsheaders",
    "django_extensions",
    "rest_framework",
    "django_celery_results",
    "django_celery_beat",
    "auditlog",

    "contrib.db_pool",
    "permissions",
    "users",
    "generics",
]


# MIDDLEWARE
# ------------------------------------------------------------------------------
# Application Middleware
MIDDLEWARE = [
    # Cross Domain Middleware
    "corsheaders.middleware.CorsMiddleware",

    # Django Middleware
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # https://whitenoise.readthedocs.io/en/stable/index.html
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.gzip.GZipMiddleware',  # 压缩Django的HTTP响应

    # Project Util Middleware
    "{0}.middleware.authorize.AuthorizeMiddleware".format(APP_NAME),
    'auditlog.middleware.AuditlogMiddleware',
    "{0}.middleware.api_response.ApiResponseMiddleware".format(APP_NAME),
    "{0}.middleware.spaceless.SpacelessMiddleware".format(APP_NAME),
]


# URLS
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#root-urlconf
ROOT_URLCONF = 'config.urls'

# https://docs.djangoproject.com/en/dev/ref/settings/#wsgi-application
WSGI_APPLICATION = 'config.wsgi.application'


# SESSION_ENGINE
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/zh-hans/3.1/ref/settings/#std:setting-SESSION_ENGINE
# Session 放入到缓存中，提高一点性能
# SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"
# SESSION_CACHE_ALIAS = "session"

# TEMPLATES
# ------------------------------------------------------------------------------
# Django Templates

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',

        # 引擎应在目录中按搜索顺序查找模板源文件
        'DIRS': [
            str(PROJECT_DIR / "templates")
        ],

        # 是否应该在已安装的应用程序中寻找模板
        'APP_DIRS': True,

        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],

            # 模板标签模块的标签字典和点分隔 Python 路径，用于向模板引擎注册。 这可用于添加新库或为现有库提供替代标签。
            'libraries': {  # Adding this section should work around the issue.
                'simple_tags': '{}.templatetags.simple_tags'.format(APP_NAME),
                'audit_logs': '{}.templatetags.audit_logs'.format(APP_NAME),
                'set_var': '{}.templatetags.set_var'.format(APP_NAME),
            },
        },
    },
]


# Master And Slave Router, But Admin could error
# DATABASE_ROUTERS = ["config.db_router.DatabaseRouter"]


# PASSWORDS
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#password-hashers
PASSWORD_HASHERS = [
    # https://docs.djangoproject.com/en/dev/topics/auth/passwords/#using-argon2-with-django
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/
# https://docs.djangoproject.com/en/dev/ref/settings/#language-code
LANGUAGE_CODE = 'zh-hans'

# Local time zone. Choices are
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# though not all of them may be available with every OS.
# In Windows, this must be set to your system time zone.
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = False


# https://docs.djangoproject.com/en/dev/ref/settings/#static-root
# 生产环境下Django对静态资源的处理
# whitenoise 当nginx/apache不可用时，建议使用；使用whitenoise时，可选django-compressor 二次压缩
STATIC_ROOT = str(BASE_DIR / "staticfiles")
# Note that:
#   仅压缩, collectstatic 命令稍快点, 可配合Django-Compressor压缩
#   "whitenoise.storage.CompressedStaticFilesStorage"
#
#   压缩并缓存, collectstatic 命令比较慢(生产可能因缓存找不到静态文件), 可配合Django-Compressor压缩
#   "whitenoise.storage.CompressedManifestStaticFilesStorage"
#
#   存储到ALIYUN OSS, 速度更快(文件太多上传OSS慢啊), 暂不能配合Django-Compressor压缩
#   "{APP_NAME}.contrib.storage.backends.aliyun.AliyunStaticStorage"
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

# https://docs.djangoproject.com/en/dev/ref/settings/#static-url
# 对外提供WEB访问时的URL地址
STATIC_URL = "static/"

# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:setting-STATICFILES_DIRS
# 开发环境下Django对静态资源的处理, 不能包含STATIC_ROOT路径，STATIC_ROOT 与 STATICFILES_DIRS的路径不能重复
STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, "staticfiles")
]
COMPRESS_ENABLED = False

# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#staticfiles-finders
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",

    "compressor.finders.CompressorFinder",
]

# https://docs.djangoproject.com/en/dev/ref/settings/#media-root
MEDIA_ROOT = "/tmp/media/"
MEDIA_URL = "/media/"


# Custom User Model
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#auth
AUTH_USER_MODEL = "users.UsersModel"


# SECURITY
# ------------------------------------------------------------------------------
# Http Security
# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-httponly
SESSION_COOKIE_HTTPONLY = True

# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-httponly
CSRF_COOKIE_HTTPONLY = True

# https://docs.djangoproject.com/en/dev/ref/settings/#secure-browser-xss-filter
SECURE_BROWSER_XSS_FILTER = True

# https://docs.djangoproject.com/en/dev/ref/settings/#x-frame-options
X_FRAME_OPTIONS = "DENY"


# LOGGING
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#logging
# See https://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.


# django-rest-framework
# -------------------------------------------------------------------------------
# django-rest-framework - https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (

        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),

    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.AllowAny",

        # Use Django's standard `django.contrib.auth` permissions,
        # or allow read-only access for unauthenticated users.
        # "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly",
    ),

    "DEFAULT_RENDERER_CLASSES":
        (
            "rest_framework.renderers.JSONRenderer",
        ),

    # EXCEPTION_HANDLER
    # "EXCEPTION_HANDLER": APP_NAME + ".core.rest.exceptions.exception_handler",

    # Pagination
    # "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "DEFAULT_PAGINATION_CLASS": APP_NAME + ".core.drf.pagination.Pagination",
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=3),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "AUTH_TOKEN_CLASSES": [
        "rest_framework_simplejwt.tokens.AccessToken",
        "rest_framework_simplejwt.tokens.RefreshToken",
    ]
}


# CROS
# ------------------------------------------------------------------------------
# Cross Domain Origin
CORS_ORIGIN_ALLOW_ALL = True


# WebSocket
# ------------------------------------------------------------------------------
# Async Deploy to websocket
ASGI_APPLICATION = "config.asgi.application"
CHANNEL_LAYERS = {}


# AUTHENTICATION_BACKENDS
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/3.1/ref/settings/#std:setting-AUTHENTICATION_BACKENDS
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    # 'guardian.backends.ObjectPermissionBackend',
]


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# DJANGO_CELERY_BEAT_TZ_AWARE
# ------------------------------------------------------------------------------
# https://githubmemory.com/repo/celery/django-celery-beat/issues/428
# ValueError: MySQL backend does not support timezone-aware datetimes when USE_TZ is False.
# 在django的settings中配置 DJANGO_CELERY_BEAT_TZ_AWARE=False 即可
DJANGO_CELERY_BEAT_TZ_AWARE = False


# Refused to apply style from '<URL>' because its MIME type ('application/json') is not a supported stylesheet MIME
# type, and strict MIME checking is enabled.
SECURE_CONTENT_TYPE_NOSNIFF = False
mimetypes.add_type("text/css", ".css")
mimetypes.add_type("text/javascript", ".js")
mimetypes.add_type("application/javascript", ".js")

# Auth Cookie
AUTH_COOKIE_KEY = 'X-Auth'
AUTH_COOKIE_SALT = 'KuXEudsJPz9kiUsNK3zGYCbVelkrKpa5'


# Other Config
# ------------------------------------------------------------------------------
# 导入方式需要优化
from config.conf.log import *
from config.conf.simple_admin import *
# from config.conf.dynamic_config import *
# from config.conf.admin_ui import *
# from config.conf.mail import *


# Auditlog Config
AUDITLOG_INCLUDE_ALL_MODELS = True
AUDITLOG_EXCLUDE_TRACKING_FIELDS = (
    'creator', 'modifier',
    'create_time', 'update_time',
)
# AUDITLOG_CONFIGURATION =
