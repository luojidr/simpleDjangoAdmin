# Generated by Django 4.2.7 on 2023-11-23 15:34

import core.db.base
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CaptchaTemplateModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "creator",
                    models.CharField(
                        default=core.db.base.AutoExecutor(),
                        max_length=200,
                        verbose_name="创建人",
                    ),
                ),
                (
                    "modifier",
                    models.CharField(
                        default=core.db.base.AutoExecutor(),
                        max_length=200,
                        verbose_name="创建人",
                    ),
                ),
                (
                    "create_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "update_time",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                ("is_del", models.BooleanField(default=False, verbose_name="是否删除")),
                (
                    "template_type",
                    models.IntegerField(
                        choices=[(1, "邮箱注册验证码"), (2, "短信注册验证码")],
                        default=1,
                        unique=True,
                        verbose_name="验证码类型",
                    ),
                ),
                (
                    "html_template",
                    models.CharField(default="", max_length=1000, verbose_name="验证码模板"),
                ),
            ],
            options={
                "verbose_name": "验证码模板",
                "verbose_name_plural": "验证码模板",
                "db_table": "user_captcha_template",
            },
        ),
        migrations.CreateModel(
            name="UserCaptchaCodeModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "creator",
                    models.CharField(
                        default=core.db.base.AutoExecutor(),
                        max_length=200,
                        verbose_name="创建人",
                    ),
                ),
                (
                    "modifier",
                    models.CharField(
                        default=core.db.base.AutoExecutor(),
                        max_length=200,
                        verbose_name="创建人",
                    ),
                ),
                (
                    "create_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "update_time",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                ("is_del", models.BooleanField(default=False, verbose_name="是否删除")),
                (
                    "mobile",
                    models.CharField(
                        db_index=True, default="", max_length=11, verbose_name="手机号"
                    ),
                ),
                (
                    "email",
                    models.CharField(
                        db_index=True, default="", max_length=100, verbose_name="邮箱"
                    ),
                ),
                (
                    "captcha",
                    models.CharField(
                        db_index=True, default="", max_length=10, verbose_name="验证码"
                    ),
                ),
                (
                    "captcha_type",
                    models.IntegerField(
                        choices=[(1, "邮箱校验"), (2, "手机校验")],
                        default=1,
                        verbose_name="校验类型",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        help_text="验证码类型",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="captcha_template",
                        to="users.captchatemplatemodel",
                    ),
                ),
            ],
            options={
                "verbose_name": "用户验证码详情 ",
                "verbose_name_plural": "用户验证码详情 ",
                "db_table": "user_captcha_code",
            },
        ),
        migrations.CreateModel(
            name="UsersModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "creator",
                    models.CharField(
                        default=core.db.base.AutoExecutor(),
                        max_length=200,
                        verbose_name="创建人",
                    ),
                ),
                (
                    "modifier",
                    models.CharField(
                        default=core.db.base.AutoExecutor(),
                        max_length=200,
                        verbose_name="创建人",
                    ),
                ),
                (
                    "create_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "update_time",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                ("is_del", models.BooleanField(default=False, verbose_name="是否删除")),
                (
                    "is_superuser",
                    models.BooleanField(default=False, verbose_name="是否超级管理员"),
                ),
                (
                    "avatar",
                    models.CharField(default="", max_length=500, verbose_name="头像链接"),
                ),
                (
                    "name_chz",
                    models.CharField(default="", max_length=200, verbose_name="中文名"),
                ),
                (
                    "name_eng",
                    models.CharField(default="", max_length=200, verbose_name="英文名"),
                ),
                (
                    "gender",
                    models.SmallIntegerField(
                        choices=[("M", "男"), ("F", "女"), ("U", "保密")],
                        default=3,
                        verbose_name="性别",
                    ),
                ),
                (
                    "birthday",
                    models.DateField(default="1979-01-01", verbose_name="出生日期"),
                ),
                (
                    "mobile",
                    models.CharField(
                        default="", max_length=20, unique=True, verbose_name="手机号码"
                    ),
                ),
                (
                    "state_code",
                    models.CharField(
                        default="+86", max_length=10, verbose_name="手机国家码"
                    ),
                ),
                (
                    "company",
                    models.CharField(default="", max_length=200, verbose_name="公司名"),
                ),
                (
                    "department",
                    models.CharField(default="", max_length=500, verbose_name="部门"),
                ),
                (
                    "position",
                    models.CharField(default="", max_length=500, verbose_name="职位"),
                ),
                (
                    "source",
                    models.CharField(default="SYS", max_length=20, verbose_name="用户来源"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "用户",
                "verbose_name_plural": "用户",
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
